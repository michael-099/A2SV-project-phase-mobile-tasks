// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce_app/test/features/product/data/repositories/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommerce_app/core/error/failure.dart' as _i7;
import 'package:ecommerce_app/core/platform/network_info.dart' as _i8;
import 'package:ecommerce_app/features/product/data/datasources/product_local_data_source.dart'
    as _i9;
import 'package:ecommerce_app/features/product/data/datasources/product_remote_data_source.dart'
    as _i10;
import 'package:ecommerce_app/features/product/data/models/product_model.dart'
    as _i3;
import 'package:ecommerce_app/features/product/domain/entities/product.dart'
    as _i4;
import 'package:ecommerce_app/features/product/domain/repositories/product_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_1 extends _i1.SmartFake implements _i3.ProductModel {
  _FakeProductModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProduct_2 extends _i1.SmartFake implements _i4.Product {
  _FakeProduct_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_3 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i5.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i4.Product>> viewSpecificProduct(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewSpecificProduct,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i4.Product>>.value(
            _FakeEither_0<_i7.Failure, _i4.Product>(
          this,
          Invocation.method(
            #viewSpecificProduct,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i4.Product>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i4.Product>>> viewAllProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #viewAllProducts,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i4.Product>>>.value(
                _FakeEither_0<_i7.Failure, List<_i4.Product>>(
          this,
          Invocation.method(
            #viewAllProducts,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i4.Product>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i7.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i2.Unit>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i4.Product>> updateProduct(
          _i4.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i4.Product>>.value(
            _FakeEither_0<_i7.Failure, _i4.Product>(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i4.Product>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i4.Product>> addProduct(
          _i4.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [product],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i4.Product>>.value(
            _FakeEither_0<_i7.Failure, _i4.Product>(
          this,
          Invocation.method(
            #addProduct,
            [product],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i4.Product>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i8.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i9.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.ProductModel> viewSpecificProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewSpecificProduct,
          [id],
        ),
        returnValue: _i6.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #viewSpecificProduct,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.ProductModel>);

  @override
  _i6.Future<List<_i3.ProductModel>> viewAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #viewAllProducts,
          [],
        ),
        returnValue:
            _i6.Future<List<_i3.ProductModel>>.value(<_i3.ProductModel>[]),
      ) as _i6.Future<List<_i3.ProductModel>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i10.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Product> viewSpecificProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewSpecificProduct,
          [id],
        ),
        returnValue: _i6.Future<_i4.Product>.value(_FakeProduct_2(
          this,
          Invocation.method(
            #viewSpecificProduct,
            [id],
          ),
        )),
      ) as _i6.Future<_i4.Product>);

  @override
  _i6.Future<List<_i4.Product>> viewAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #viewAllProducts,
          [],
        ),
        returnValue: _i6.Future<List<_i4.Product>>.value(<_i4.Product>[]),
      ) as _i6.Future<List<_i4.Product>>);

  @override
  _i6.Future<_i2.Unit> deleteProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i6.Future<_i2.Unit>.value(_FakeUnit_3(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Unit>);

  @override
  _i6.Future<_i4.Product> updateProduct(_i4.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i6.Future<_i4.Product>.value(_FakeProduct_2(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i6.Future<_i4.Product>);

  @override
  _i6.Future<_i4.Product> addProduct(_i4.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [product],
        ),
        returnValue: _i6.Future<_i4.Product>.value(_FakeProduct_2(
          this,
          Invocation.method(
            #addProduct,
            [product],
          ),
        )),
      ) as _i6.Future<_i4.Product>);
}
